using Bogus.CLI.App.Constants;
using Bogus.CLI.App.Services.Interface;
using System.Text.RegularExpressions;

namespace Bogus.CLI.App.Services;
public class DatasetService(
    IFakerService fakerService,
    IFakeDataLoremService fakeDataLoremService,
    IFakeDataNameService fakeDataNameService,
    IFakeDataPhoneService fakeDataPhoneService) : IDatasetService
{
    private readonly IFakerService _fakerService = fakerService;
    private readonly IFakeDataLoremService _fakeDataLoremService = fakeDataLoremService;
    private readonly IFakeDataNameService _fakeDataNameService = fakeDataNameService;
    private readonly IFakeDataPhoneService _fakeDataPhoneService = fakeDataPhoneService;

    public List<List<string>> ExecuteCommand(string[] datasets, int count, string? locale, string? parameters, out string message)
    {
        // Controls the randomness of the values generated by the Bogus library.
        Randomizer.Seed = new Random();

        _fakerService.SetLanguage(locale);

        var results = new List<List<string>>();
        if (!TryParseParameters(parameters, out var parsedParams))
        {
            message = $"Sorry, but there is an issue with the parameters option. Please check.";
            return results;
        }

        for (int i = 0; i < count; i++)
        {
            var row = new List<string>();
            foreach (var dataset in datasets)
            {
                if (!TryGetCategoryAndProperty(dataset, out var category, out var property))
                {
                    message = $"Invalid format for dataset: {dataset}. Use <dataset.sub-option>.";
                    return results;
                }

                var value = category switch
                {
                    Categories.LOREM => _fakeDataLoremService.Generate(property, parsedParams),
                    Categories.NAME => _fakeDataNameService.Generate(property, parsedParams),
                    Categories.PHONE => _fakeDataPhoneService.Generate(property, parsedParams),
                    _ => null
                };

                if (string.IsNullOrEmpty(value))
                {
                    message = $"Dataset or sub-option unknown: {dataset}";
                    return results;
                }

                row.Add(value);
            }

            results.Add(row);
        }

        message = string.Empty;
        return results;
    }

    public static bool TryGetCategoryAndProperty(string dataset, out string category, out string property)
    {
        var parts = dataset.Split('.');
        if (parts.Length != 2)
        {
            category = string.Empty;
            property = string.Empty;
            return false;
        }

        category = parts[0].ToLower();
        property = parts[1].ToLower();
        return true;
    }

    public static bool TryParseParameters(
        string? parameters, out Dictionary<string, object> parsedParameters)
    {
        parsedParameters = [];

        if (string.IsNullOrWhiteSpace(parameters))
            return true;

        var regex = new Regex(@"^[a-zA-Z]+=[\w\S]+$");
        var splitParams = parameters.Split(' ', StringSplitOptions.RemoveEmptyEntries);

        foreach (var param in splitParams)
        {
            if (!regex.IsMatch(param))
                return false;

            var keyValue = param.Split('=');
            if (keyValue.Length == 2)
                parsedParameters[keyValue[0].ToLower()] = keyValue[1];
        }

        return true;
    }
}
