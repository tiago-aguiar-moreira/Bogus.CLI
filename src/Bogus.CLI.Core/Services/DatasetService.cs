using CONST = Bogus.CLI.Core.Constants;
using Bogus.CLI.Core.Helpers.Interface;
using Bogus.CLI.Core.Services.Interface;

namespace Bogus.CLI.Core.Services;
public class DatasetService(
    IDatasetHelper datasetHelper,
    IFakerService fakerService,
    IParserDatasetLoremService fakeDataLoremService,
    IParserDatasetNameService fakeDataNameService,
    IParserDatasetPhoneService fakeDataPhoneService) : IDatasetService
{
    private readonly IDatasetHelper _datasetHelper = datasetHelper;
    private readonly IFakerService _fakerService = fakerService;
    private readonly IParserDatasetLoremService _fakeDataLoremService = fakeDataLoremService;
    private readonly IParserDatasetNameService _fakeDataNameService = fakeDataNameService;
    private readonly IParserDatasetPhoneService _fakeDataPhoneService = fakeDataPhoneService;

    public void ExecuteCommand(
        string[] datasets,
        int count,
        string? locale,
        Action<List<(string Value, string Alias)>> onGenerateFakedata)
    {
        // Controls the randomness of the values generated by the Bogus library.
        Randomizer.Seed = new Random();

        _fakerService.LocaleCode = locale ?? string.Empty;

        if (count <= 0)
            throw new Exception("The option --count must be greater than 1.");

        // Pre-processing: validation and extraction of information from datasets.
        var datasetInfos = new List<(
            string DatasetName,
            string PropertyName,
            string Alias,
            IDictionary<string, object> Parameters)>();

        foreach (var dataset in datasets)
        {
            if (!_datasetHelper.TryParseDataset(
                dataset, out string datasetName, out string propertyName, out string alias, out var parameters))
            {
                throw new Exception($"Invalid format for dataset: {dataset}. Use <dataset.sub-option>.");
            }

            if (!_datasetHelper.DatasetExists(datasetName))
            {
                throw new Exception($"Dataset '{datasetName}' not found.");
            }

            if (!_datasetHelper.PropertyExists(datasetName, propertyName))
            {
                throw new Exception($"The '{datasetName}' does not contain the property '{propertyName}'.");
            }

            datasetInfos.Add((datasetName, propertyName, alias, parameters));
        }

        // Main processing

        for (int i = 0; i < count; i++)
        {
            var row = new List<(string Value, string Alias)>();

            foreach (var (datasetName, propertyName, alias, parameters) in datasetInfos)
            {
                var value = Generate(datasetName, propertyName, parameters);

                if (string.IsNullOrEmpty(value))
                    throw new Exception($"Dataset or property unknown: {datasetName}.{propertyName}");

                row.Add((Value: value, Alias: alias));
            }

            onGenerateFakedata.Invoke(row);
        }
    }

    private string? Generate(
        string datasetName, string propertyName, IDictionary<string, object> parameters) => datasetName switch
    {
        CONST.Datasets.LOREM => _fakeDataLoremService.Generate(propertyName, parameters),
        CONST.Datasets.NAME => _fakeDataNameService.Generate(propertyName, parameters),
        CONST.Datasets.PHONE => _fakeDataPhoneService.Generate(propertyName, parameters),
        _ => null
    };
}
